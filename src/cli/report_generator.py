"""Generate optimized markdown reports for job scans"""

from datetime import datetime, timedelta
from pathlib import Path
from typing import List


def generate_markdown_report(db_manager, min_score: int = 40, output_path: str = None):
    """Generate a comprehensive markdown report of job matches"""

    # Get jobs
    all_jobs = db_manager.get_top_jobs(limit=100, min_score=0)
    top_jobs = [j for j in all_jobs if j.overall_score and j.overall_score >= min_score]

    # Create output directory with timestamp if no path provided
    if output_path is None:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        output_path = f"reports/job_scan_report_{timestamp}.md"

    output_file = Path(output_path)
    output_file.parent.mkdir(parents=True, exist_ok=True)

    # Generate report
    report = f"""# VACAI Job Scan Report

**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Total Jobs Scanned**: {len(all_jobs)}
**Jobs Meeting Criteria (≥{min_score})**: {len(top_jobs)}

---

## Filters Applied

- ✅ **Hybrid/Remote with NL office** (within 30min commute from Haarlem)
- ✅ **In-house positions only** (no consultancy/detachering)
- ✅ **NL/EU companies** (no US-only remote)
- ✅ **Locations**: Haarlem, Amsterdam, Leiden, Hoofddorp, Netherlands

---

## Summary Statistics

"""

    # Add statistics
    strong_matches = [j for j in all_jobs if j.overall_score and j.overall_score >= 80]
    potential_matches = [j for j in all_jobs if j.overall_score and 60 <= j.overall_score < 80]
    low_scores = [j for j in all_jobs if j.overall_score and j.overall_score < 60]

    report += f"""- **Strong Matches (80-100)**: {len(strong_matches)}
- **Potential Matches (60-79)**: {len(potential_matches)}
- **Low Scores (<60)**: {len(low_scores)}

---

## Top Job Matches

"""

    if not top_jobs:
        report += "*No jobs found matching the minimum score criteria.*\n\n"
    else:
        for i, job in enumerate(top_jobs, 1):
            report += format_job_markdown(job, rank=i)

    # Add rejected jobs summary
    report += f"""---

## Rejected Jobs Summary

**Total Rejected**: {len(low_scores)}

### Common Rejection Reasons:
"""

    # Analyze rejection reasons
    consultancy_count = 0
    no_nl_office = 0
    poor_skills_match = 0

    for job in low_scores:
        if job.ai_score:
            emp_score = job.ai_score.get('employment_type_fit', 0)
            skills_score = job.ai_score.get('skills_match', 0)

            if emp_score < 50:
                if 'consultant' in job.title.lower() or 'consultant' in (job.company or '').lower():
                    consultancy_count += 1
                else:
                    no_nl_office += 1
            elif skills_score < 50:
                poor_skills_match += 1

    report += f"""- **Consultancy/Recruitment roles**: {consultancy_count}
- **No NL/EU presence**: {no_nl_office}
- **Poor skills match**: {poor_skills_match}
- **Other reasons**: {len(low_scores) - consultancy_count - no_nl_office - poor_skills_match}

---

## Scan Configuration

**Search Terms**:
- Azure Cloud Engineer
- AI Solutions Architect
- Engineering Solution Architect
- Cloud & Platform Engineer
- IT Engineer

**Must-Have Skills**:
- Azure Cloud
- AI Solutions
- Python
- Microsoft Azure
- OpenAI Services
- AI Model Integration
- Cloud-native Applications

**Work Mode**: Hybrid preferred
**Commute**: Max 30 minutes from Haarlem
**Employment**: In-house only (no consultancy)
**Location**: NL/EU presence required

---

*Report generated by VACAI - AI-Powered Job Search Automation*
"""

    # Write report
    with open(output_file, 'w') as f:
        f.write(report)

    return output_file


def format_job_markdown(job, rank: int) -> str:
    """Format a single job as markdown"""

    score = job.overall_score or 0
    score_emoji = "🟢" if score >= 80 else "🟡" if score >= 60 else "🔴"

    # Format salary
    salary = "Not specified"
    if job.min_salary or job.max_salary:
        if job.min_salary and job.max_salary:
            salary = f"€{job.min_salary:,.0f} - €{job.max_salary:,.0f}"
        elif job.min_salary:
            salary = f"€{job.min_salary:,.0f}+"
        else:
            salary = f"Up to €{job.max_salary:,.0f}"

    md = f"""### {rank}. {score_emoji} {job.title} - **{score}/100**

**Company**: {job.company}
**Location**: {job.location or 'Not specified'}
**Salary**: {salary}
**Posted**: {job.posted_date.strftime('%Y-%m-%d') if job.posted_date else 'Unknown'}
**Source**: {job.source}

"""

    # Add scoring details if available
    if job.ai_score:
        score_data = job.ai_score

        md += f"""**Dimension Scores**:
- Skills Match: {score_data.get('skills_match', 0)}/100
- Experience Fit: {score_data.get('experience_fit', 0)}/100
- Employment Type (In-house): {score_data.get('employment_type_fit', 0)}/100
- Commute Feasibility: {score_data.get('commute_feasibility', 0)}/100
- Culture Fit: {score_data.get('culture_fit', 0)}/100
- Growth Potential: {score_data.get('growth_potential', 0)}/100

**Summary**: {score_data.get('summary', 'N/A')}

"""

        # Add highlights
        highlights = score_data.get('match_highlights', [])
        if highlights:
            md += "**✅ Match Highlights**:\n"
            for highlight in highlights:
                md += f"- {highlight}\n"
            md += "\n"

        # Add concerns
        concerns = score_data.get('concerns', [])
        if concerns:
            md += "**⚠️ Concerns**:\n"
            for concern in concerns:
                md += f"- {concern}\n"
            md += "\n"

    md += f"**[Apply Here]({job.job_url})**\n\n---\n\n"

    return md


def generate_daily_report(db_manager, output_path: str = None):
    """Generate daily incremental report highlighting new jobs"""

    today = datetime.now()
    if output_path is None:
        output_path = f"reports/daily_scan_{today.strftime('%Y%m%d')}.md"

    # Create output directory
    output_file = Path(output_path)
    output_file.parent.mkdir(parents=True, exist_ok=True)

    # Get new jobs from last 24 hours
    new_jobs = db_manager.get_jobs_last_24h()
    new_strong = [j for j in new_jobs if j.overall_score and j.overall_score >= 80]
    new_potential = [j for j in new_jobs if j.overall_score and 60 <= j.overall_score < 80]
    new_low = [j for j in new_jobs if j.overall_score and j.overall_score < 60]

    # Get cumulative stats
    all_jobs = db_manager.get_recent_jobs(limit=1000)
    total_strong = len([j for j in all_jobs if j.overall_score and j.overall_score >= 80])
    total_potential = len([j for j in all_jobs if j.overall_score and 60 <= j.overall_score < 80])

    # Generate report
    report = f"""# VACAI Daily Scan Report

**Date**: {today.strftime('%A, %B %d, %Y')}
**Generated**: {today.strftime('%H:%M:%S')}

---

## 📊 Today's Summary

**New Jobs Found**: {len(new_jobs)}
- 🎯 **Strong Matches (80-100)**: {len(new_strong)}
- 🟡 **Potential Matches (60-79)**: {len(new_potential)}
- 🔴 **Low Scores (<60)**: {len(new_low)}

---

## 🆕 New Strong Matches Today

"""

    if new_strong:
        report += "*These are your top priorities for today!*\n\n"
        for i, job in enumerate(new_strong, 1):
            report += format_job_markdown(job, rank=i)
    else:
        report += "*No new strong matches found today.*\n\n"

    report += """---

## 🟡 New Potential Matches

"""

    if new_potential:
        for i, job in enumerate(new_potential, 1):
            report += format_job_markdown(job, rank=i)
    else:
        report += "*No new potential matches today.*\n\n"

    report += f"""---

## 📈 Cumulative Statistics

**Total Jobs in Database**: {len(all_jobs)}
- All-time Strong Matches: {total_strong}
- All-time Potential Matches: {total_potential}

---

## ⚙️ Active Filters

- ✅ Hybrid/Remote with NL office (30min from Haarlem)
- ✅ In-house positions only (no consultancy)
- ✅ NL/EU companies (no US-only remote)
- ✅ Locations: Haarlem, Amsterdam, Leiden, Hoofddorp, Netherlands

---

## 🔔 Next Actions

"""

    if new_strong:
        report += f"""1. **Review {len(new_strong)} strong match(es)** - Priority applications
2. Apply to top matches within 24-48 hours
3. Update application tracking
"""
    elif new_potential:
        report += f"""1. Review {len(new_potential)} potential match(es)
2. Research companies before applying
3. Consider customizing applications
"""
    else:
        report += """1. No urgent action needed today
2. Check back tomorrow for new opportunities
3. Consider expanding search criteria if needed
"""

    report += f"""
---

*Daily scan completed at {today.strftime('%H:%M')} | Next scan: Tomorrow at 09:00*
*Report generated by VACAI - AI-Powered Job Search Automation*
"""

    # Write report
    with open(output_file, 'w') as f:
        f.write(report)

    return output_file, len(new_strong), len(new_potential)
